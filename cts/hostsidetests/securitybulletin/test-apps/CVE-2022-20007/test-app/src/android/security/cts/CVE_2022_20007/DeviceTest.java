/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2022_20007;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeNotNull;
import static org.junit.Assume.assumeTrue;

import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.OnSharedPreferenceChangeListener;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private Context mContext = getApplicationContext();

    String getStringRes(int key) {
        return mContext != null ? mContext.getResources().getString(key) : null;
    }

    int getIntegerRes(int key) {
        return mContext != null ? mContext.getResources().getInteger(key) : null;
    }

    @Test
    public void testRaceCondition() throws Exception {
        final long timeoutSec = 20L;
        assumeNotNull(mContext);
        final Intent intent = new Intent(mContext, PocMainActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        try {
            mContext.startActivity(intent);
        } catch (ActivityNotFoundException e) {
            assumeNoException(e);
        }
        SharedPreferences sharedPrefs = mContext.getSharedPreferences(
                getStringRes(R.string.sharedPreferences), Context.MODE_APPEND);
        assumeNotNull(sharedPrefs);
        final Semaphore preferenceChanged = new Semaphore(0);
        OnSharedPreferenceChangeListener listener = new OnSharedPreferenceChangeListener() {
            @Override
            public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
                if (key.equals(getStringRes(R.string.resultKey))) {
                    if (sharedPreferences.getInt(key,
                            getIntegerRes(R.integer.assumptionFailure)) == getIntegerRes(
                                    R.integer.pass)) {
                        preferenceChanged.release();
                    }
                }
            }
        };
        sharedPrefs.registerOnSharedPreferenceChangeListener(listener);
        try {
            preferenceChanged.tryAcquire(timeoutSec, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            assumeNoException(e);
        }
        int result = sharedPrefs.getInt(getStringRes(R.string.resultKey),
                getIntegerRes(R.integer.assumptionFailure));
        String message = sharedPrefs.getString(getStringRes(R.string.messageKey),
                getStringRes(R.string.assumptionFailureMessage));
        assumeTrue(message, result != getIntegerRes(R.integer.assumptionFailure));
        assertNotEquals(message, result, getIntegerRes(R.integer.fail));
    }
}
